from unittest.mock import AsyncMock, patch

import pytest

from meta_aggregation_api.models.meta_agg_models import ProviderQuoteResponse, ProviderPriceResponse


@pytest.mark.asyncio()
@patch(
    'meta_aggregation_api.providers.debridge_dln_v1.DebridgeDlnProviderV1._get_response',

    new_callable=AsyncMock,
)
async def test_get_swap_quote(get_response_mock: AsyncMock, debridge_provider):
    get_response_mock.return_value = {
        "tx": {
            "value": "101000000000000000",
            "data": "0x4d8160ba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000009c39d0a000000000000000000000000e5164dde788a150bee9e4efeeb37ab774edd618b000000000000000000000000ef4fb24ad0916217251f553c0596f8edc630eb660000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002687c0252000000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000663dc15d3c1ac63ff12e45ab68fea3f0a883c251000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000009c39d0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000007d00001a4041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db002a00000000000000000000000000000000000000000000000000000000009abdaefee63c1e58088e6a0c2ddd26feeb64f039a2c41296fcb3f5640c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21111111254fb6c44bac0bed2854e76f90643097d000000000000000000000000000000000000000000000000016345785d8a00000000000000a36e5de70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344fbe16ca70000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000009c39d0a000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000896aae84327ae380f000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000e5164dde788a150bee9e4efeeb37ab774edd618b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000014e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e5164dde788a150bee9e4efeeb37ab774edd618b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e5164dde788a150bee9e4efeeb37ab774edd618b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "to": "0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251",
            "gasLimit": 1000
        },
        "estimation": {
            "srcChainTokenIn": {
              "address": "0x0000000000000000000000000000000000000000",
              "decimals": 18,
              "name": "ETH",
              "symbol": "ETH",
              "chainId": 1,
              "amount": "104036134770989096"
            },
            "dstChainTokenOut": {
              "address": "0xe9e7cea3dedca5984780bafc599bd69add087d56",
              "decimals": 18,
              "name": "BUSD Token",
              "symbol": "BUSD",
              "chainId": 56,
              "amount": "162924600212540696080",
              "recommendedAmount": "162924600212540696080"
            },
          }
    }
    give_chain_id = 56
    take_chain_id = 1
    buy_token = 'test_maker_token'
    sell_token = 'test_taker_token'
    sell_amount = 1234
    slippage_percentage = 1
    taker_address = 'test_taker_address'
    query = {
        'srcChainId': give_chain_id,
        'srcChainTokenIn': sell_token,
        'srcChainTokenInAmount': sell_amount,
        'dstChainId': take_chain_id,
        'dstChainTokenOut': buy_token,
        'affiliateFeePercent': 0,
        'dstChainTokenOutAmount': 'auto',
        'dstChainTokenOutRecipient': taker_address,
        'srcChainOrderAuthorityAddress': taker_address,
        'dstChainOrderAuthorityAddress': taker_address,
    }
    res = await debridge_provider.get_swap_quote(
        chain_id_from=give_chain_id,
        chain_id_to=take_chain_id,
        buy_token=buy_token,
        sell_token=sell_token,
        sell_amount=sell_amount,
        slippage_percentage=slippage_percentage,
        taker_address=taker_address,
    )
    get_response_mock.assert_awaited_with('https://api.dln.trade/v1.0/dln/order/create-tx', query)
    assert res
    assert isinstance(res, ProviderQuoteResponse)

@pytest.mark.asyncio()
@patch(
    'meta_aggregation_api.providers.debridge_dln_v1.DebridgeDlnProviderV1._get_response',

    new_callable=AsyncMock,
)
async def test_get_swap_price(get_response_mock: AsyncMock, debridge_provider):
    get_response_mock.return_value = {
        "estimation": {
            "srcChainTokenIn": {
              "address": "0x0000000000000000000000000000000000000000",
              "decimals": 18,
              "name": "ETH",
              "symbol": "ETH",
              "chainId": 1,
              "amount": "104036134770989096",
            },
            "dstChainTokenOut": {
              "address": "0xe9e7cea3dedca5984780bafc599bd69add087d56",
              "decimals": 18,
              "name": "BUSD Token",
              "symbol": "BUSD",
              "chainId": 56,
              "amount": "162924600212540696080",
              "recommendedAmount": "162924600212540696080"
            },
          }
    }
    give_chain_id = 56
    take_chain_id = 1
    buy_token = 'test_maker_token'
    sell_token = 'test_taker_token'
    sell_amount = 1234
    slippage_percentage = 1
    taker_address = 'test_taker_address'
    query = {
        'srcChainId': give_chain_id,
        'srcChainTokenIn': sell_token,
        'srcChainTokenInAmount': sell_amount,
        'dstChainId': take_chain_id,
        'dstChainTokenOut': buy_token,
        'affiliateFeePercent': 0,
        'prependOperatingExpenses': 'false',
    }
    res = await debridge_provider.get_swap_price(
        chain_id_from=give_chain_id,
        chain_id_to=take_chain_id,
        buy_token=buy_token,
        sell_token=sell_token,
        sell_amount=sell_amount,
        slippage_percentage=slippage_percentage,
    )
    get_response_mock.assert_awaited_with('https://api.dln.trade/v1.0/dln/order/quote', query)
    assert res
    assert isinstance(res, ProviderPriceResponse)
